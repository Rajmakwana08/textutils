{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","React","createElement","style","height","alert","msg","type","className","role","charAt","toUpperCase","slice","About","myStyle","color","mode","backgroundColor","border","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","data-bs-parent","Navbar","href","title","aria-label","Link","aria-current","to","aboutText","onClick","changeThemeColor","TextForm","text","setText","useState","Fragment","heading","value","onChange","event","console","log","target","textareaBackground","rows","disabled","length","handleUpClick","newText","showAlert","handleLoClick","toLowerCase","handleclearClick","handleCopyText","navigator","clipboard","writeText","handleCapitalizeClick","split","map","word","join","handleRemoveExtraSpaces","trim","filter","defaultProps","App","setMode","setTextareaBackground","setAlert","message","setTimeout","Router","colors","light","dark","blue","green","red","yellow","document","body","Routes","Route","exact","path","element","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c1a8b58c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Alert(props) {\r\n    return (\r\n      <div style={{ height: '50px' }}>\r\n        {props.alert && props.alert.msg && props.alert.type && (\r\n          <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type.charAt(0).toUpperCase() + props.alert.type.slice(1)}:</strong> {props.alert.msg}\r\n            {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Alert;\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n    // const [myStyle, setMyStyle] = useState({\r\n    //     color: 'black',\r\n    //     backgroundColor: 'white'\r\n    // })\r\n    // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    // const toggleStyle = ()=>{\r\n    //     if(myStyle.color === 'black'){\r\n    //         setMyStyle({\r\n    //             color: 'white',\r\n    //             backgroundColor: 'black',\r\n    //             border: '1px solid white',\r\n    //         })\r\n    //         setBtnText('Enable Light Mode')\r\n    //     }\r\n    //     else{\r\n    //         setMyStyle({\r\n    //             color: 'black',\r\n    //             backgroundColor: 'white'\r\n    //         })\r\n    //         setBtnText('Enable Dark Mode')\r\n    //     }\r\n    // }\r\n\r\n    let myStyle = {\r\n        color: props.mode === 'dark' ? 'white' : '#211f1f',\r\n        backgroundColor: props.mode === 'dark'? '#211f1f' : 'white',\r\n        border: '1px solid'+ (props.mode === 'dark'? 'white' : 'black')\r\n    }\r\n\r\n  return (\r\n    <div className='container' style={{color: props.mode === 'dark' ? 'white' : '#211f1f'}}>\r\n        <h1 className='my-3'>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    <strong>Analyze Your text</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\" style={myStyle}>\r\n                    Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    <strong>Free to use</strong> \r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\">\r\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    <strong>Browser Compatible</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\"style={myStyle}>\r\n                    This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {/* <div className=\"container my-3\">\r\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">{btnText}</button>\r\n        </div> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          {/* Theme Buttons */}\r\n          <div className=\"d-flex\">\r\n            <button className=\"btn btn-primary mx-1\" onClick={() => props.changeThemeColor('light')}>Light</button>\r\n            <button className=\"btn btn-secondary mx-1\" onClick={() => props.changeThemeColor('dark')}>Dark</button>\r\n            <button className=\"btn btn-info mx-1\" onClick={() => props.changeThemeColor('blue')}>Blue</button>\r\n            <button className=\"btn btn-success mx-1\" onClick={() => props.changeThemeColor('green')}>Green</button>\r\n            <button className=\"btn btn-danger mx-1\" onClick={() => props.changeThemeColor('red')}>Red</button>\r\n            <button className=\"btn btn-warning mx-1\" onClick={() => props.changeThemeColor('yellow')}>Yellow</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string.isRequired,\r\n  changeThemeColor: PropTypes.func.isRequired\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About'\r\n};\r\n","import React, {useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        console.log('Uppercase was clicked'+ text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        console.log('Uppercase was clicked'+ text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n    }\r\n    const handleclearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\", \"success\");\r\n    }\r\n    const handleCopyText = () => {\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Text copied to clipboard!\", \"success\");\r\n    };\r\n    const handleCapitalizeClick = () => {\r\n        let newText = text\r\n            .split(' ')\r\n            .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())\r\n            .join(' ');\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Capitalized Words!\", \"success\");\r\n    };\r\n    const handleRemoveExtraSpaces = () => {\r\n        let newText = text.split(/\\s+/).join(' ').trim();\r\n        setText(newText);\r\n        props.showAlert(\"Extra spaces removed!\", \"success\");\r\n    };\r\n    \r\n    const handleOnChange = (event) => {\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    };\r\n    const [text, setText] = useState('');\r\n    // text = \"new text\"; //wrond way to change the state\r\n    // setText(\"new text\"); //correct way to change the state\r\n  return (\r\n    <>\r\n    <div className='container' style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n        <h1 className='mb-4'>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{\r\n            backgroundColor: props.textareaBackground,\r\n            color: props.mode === 'light' ? 'black' : 'white'\r\n            }} id=\"mybox\" rows=\"8\"></textarea>\r\n        </div>    \r\n        <button disabled={text.length==0} onClick={handleUpClick} className=\"btn btn-primary mx-1 my-1\">Convert to Uppercase</button>\r\n        <button disabled={text.length==0} onClick={handleLoClick} className=\"btn btn-primary mx-1 my-1\">Convert to Lowercase</button>\r\n        <button disabled={text.length==0} onClick={handleclearClick} className=\"btn btn-primary mx-1 my-1\">Clear Text</button>\r\n        <button disabled={text.length==0} onClick={handleCopyText} className=\"btn btn-primary mx-1 my-1\">Copy Text</button>\r\n        <button disabled={text.length==0} onClick={handleCapitalizeClick} className=\"btn btn-primary mx-1 my-1\">Capitalize Each Word</button>\r\n        <button disabled={text.length==0} onClick={handleRemoveExtraSpaces} className=\"btn btn-primary mx-1 my-1\">Remove Extra Spaces</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='light'?'black':'white'}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(\" \").filter(word => word).length} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").filter(word => word).length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, {useState} from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Current theme color\n  const [textareaBackground, setTextareaBackground] = useState('white'); // textarea background color\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n    setTimeout(() => setAlert(null), 2500);\n  };\n\n  const changeThemeColor = (color) => {\n    setMode(color);\n    const colors = {\n      light: '#fff',\n      dark: '#333',\n      blue: '#007bff',\n      green: '#28a745',\n      red: '#dc3545',\n      yellow: '#ffc107'\n    };\n    document.body.style.backgroundColor = colors[color] || '#fff';\n    setTextareaBackground(colors[color]); // Set textarea background color\n    showAlert(`${color.charAt(0).toUpperCase() + color.slice(1)} theme has been enabled`, \"success\");\n  };\n\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} changeThemeColor={changeThemeColor} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Routes>\n            <Route exact \n              path=\"/\" \n              element={<TextForm showAlert={showAlert} heading=\"Try TextUtils - Word Counter, Character Counter, Remove extra Spaces\" mode={mode} textareaBackground={textareaBackground} />} \n            />\n            <Route \n              path=\"/about\" \n              element={<About mode={mode}/>} \n            />\n          </Routes>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}